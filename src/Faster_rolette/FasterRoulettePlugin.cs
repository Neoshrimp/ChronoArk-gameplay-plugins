using BepInEx;
using BepInEx.Configuration;
using GameDataEditor;
using HarmonyLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;
using UnityEngine;
using Debug = UnityEngine.Debug;

namespace Faster_roulette
{
    [BepInPlugin(GUID, "No wait roulette", version)]
    [BepInProcess("ChronoArk.exe")]
    public class FasterRoulettePlugin : BaseUnityPlugin
    {

        public const string GUID = "org.neo.ca.qol.nowaitRoulette";
        public const string version = "1.0.0";


        private static readonly Harmony harmony = new Harmony(GUID);

        private static BepInEx.Logging.ManualLogSource logger;


        void Awake()
        {
            logger = Logger;
            harmony.PatchAll();
        }
        void OnDestroy()
        {
            if (harmony != null)
                harmony.UnpatchAll(GUID);
        }



        [HarmonyPatch]
        class NoWaitPatch
        {
            //targets internal MoveNext class generated by compiler because of method returning IEnumerable type
            static MethodBase TargetMethod()
            {
                Type targetType = null;
                foreach (var t in typeof(UI_MiniGame_Roulette).GetNestedTypes(BindingFlags.NonPublic))
                {
                    if (t.Name == "<StartCo>c__Iterator0")
                    {
                        targetType = t;
                        break;
                    }
                }
                return AccessTools.Method(targetType, "MoveNext");
            }


            static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)
            {

                foreach (var ci in instructions)
                {

                    if (ci.opcode == OpCodes.Ldc_R4 && ci.operand.ToString().Equals("5"))
                    {
                        yield return new CodeInstruction(OpCodes.Ldc_R4, 0f);
                    }
                    else
                    {

                        yield return ci;
                    }
                }

            }
        }


    }
}
